// Code generated by MockGen. DO NOT EDIT.
// Source: modules/event/query/query.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "loket-app/modules/event/model"
	reflect "reflect"
)

// MockEventQuery is a mock of EventQuery interface
type MockEventQuery struct {
	ctrl     *gomock.Controller
	recorder *MockEventQueryMockRecorder
}

// MockEventQueryMockRecorder is the mock recorder for MockEventQuery
type MockEventQueryMockRecorder struct {
	mock *MockEventQuery
}

// NewMockEventQuery creates a new mock instance
func NewMockEventQuery(ctrl *gomock.Controller) *MockEventQuery {
	mock := &MockEventQuery{ctrl: ctrl}
	mock.recorder = &MockEventQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventQuery) EXPECT() *MockEventQueryMockRecorder {
	return m.recorder
}

// InsertTicket mocks base method
func (m *MockEventQuery) InsertTicket(data *model.CreateTicketReq) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTicket", data)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTicket indicates an expected call of InsertTicket
func (mr *MockEventQueryMockRecorder) InsertTicket(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTicket", reflect.TypeOf((*MockEventQuery)(nil).InsertTicket), data)
}

// LoadTicketByIDs mocks base method
func (m *MockEventQuery) LoadTicketByIDs(ids []uint64) ([]*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTicketByIDs", ids)
	ret0, _ := ret[0].([]*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTicketByIDs indicates an expected call of LoadTicketByIDs
func (mr *MockEventQueryMockRecorder) LoadTicketByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTicketByIDs", reflect.TypeOf((*MockEventQuery)(nil).LoadTicketByIDs), ids)
}

// LoadTicketByType mocks base method
func (m *MockEventQuery) LoadTicketByType(ticketType string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTicketByType", ticketType)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTicketByType indicates an expected call of LoadTicketByType
func (mr *MockEventQueryMockRecorder) LoadTicketByType(ticketType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTicketByType", reflect.TypeOf((*MockEventQuery)(nil).LoadTicketByType), ticketType)
}

// InsertEvent mocks base method
func (m *MockEventQuery) InsertEvent(data *model.CreateEventReq) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", data)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEvent indicates an expected call of InsertEvent
func (mr *MockEventQueryMockRecorder) InsertEvent(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockEventQuery)(nil).InsertEvent), data)
}

// LoadEventByID mocks base method
func (m *MockEventQuery) LoadEventByID(id uint64) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventByID", id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadEventByID indicates an expected call of LoadEventByID
func (mr *MockEventQueryMockRecorder) LoadEventByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventByID", reflect.TypeOf((*MockEventQuery)(nil).LoadEventByID), id)
}

// GetTicket mocks base method
func (m *MockEventQuery) GetTicket(ticketID uint64) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", ticketID)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket
func (mr *MockEventQueryMockRecorder) GetTicket(ticketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockEventQuery)(nil).GetTicket), ticketID)
}
