// Code generated by MockGen. DO NOT EDIT.
// Source: modules/event/usecase/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "loket-app/modules/event/model"
	reflect "reflect"
)

// MockEventUseCase is a mock of EventUseCase interface
type MockEventUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUseCaseMockRecorder
}

// MockEventUseCaseMockRecorder is the mock recorder for MockEventUseCase
type MockEventUseCaseMockRecorder struct {
	mock *MockEventUseCase
}

// NewMockEventUseCase creates a new mock instance
func NewMockEventUseCase(ctrl *gomock.Controller) *MockEventUseCase {
	mock := &MockEventUseCase{ctrl: ctrl}
	mock.recorder = &MockEventUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventUseCase) EXPECT() *MockEventUseCaseMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method
func (m *MockEventUseCase) CreateTicket(data *model.CreateTicketReq) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", data)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket
func (mr *MockEventUseCaseMockRecorder) CreateTicket(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockEventUseCase)(nil).CreateTicket), data)
}

// CreateEvent mocks base method
func (m *MockEventUseCase) CreateEvent(data *model.CreateEventReq) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", data)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockEventUseCaseMockRecorder) CreateEvent(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventUseCase)(nil).CreateEvent), data)
}

// GetEventInformation mocks base method
func (m *MockEventUseCase) GetEventInformation(eventID uint64) (*model.EventInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventInformation", eventID)
	ret0, _ := ret[0].(*model.EventInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventInformation indicates an expected call of GetEventInformation
func (mr *MockEventUseCaseMockRecorder) GetEventInformation(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventInformation", reflect.TypeOf((*MockEventUseCase)(nil).GetEventInformation), eventID)
}

// GetTicket mocks base method
func (m *MockEventUseCase) GetTicket(ticketID uint64) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", ticketID)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket
func (mr *MockEventUseCaseMockRecorder) GetTicket(ticketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockEventUseCase)(nil).GetTicket), ticketID)
}
